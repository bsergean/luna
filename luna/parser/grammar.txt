expr                = or_expr / operand
or_expr             = and_expr   ( "or" and_expr )*
and_expr            = bool_expr  ( "and" bool_expr )*
bool_expr           = str_expr  ( ( "<" / ">" / "<=" / ">=" / "~=" / "==" ) str_expr )*
str_expr            = ( arith_expr ".." str_expr )      / arith_expr
arith_expr          = term      ( ( "+" / "-" ) term )*
term                = unary     ( ( "*" / "/" / "%" ) unary )*
unary               = ( ( "not" / "#" / "-" ) power )   / power
power               = ( factor "^" power )              / factor
factor              = operand                           /  ( "(" expr ")" )


#expr                = term ( "+" term )?
#term                = power ( "*" power)?
#power               = ( power "^" power ) / factor
#factor              = identifier / number / ( "(" expr ")" )


operand             = boolean / nil / number / string / identifier
string              = ( "'" ( "\\'" / ~"[^']" )* "'" )
                        / ( '"' ( '\\"' / ~'[^"]' )* '"' )
#number              = ~"[0-9]+[.][0-9]*" / ~"[0-9]*[.][0-9]+" / ~"[0-9]+"
number              = ~"[0-9]+[.][0-9]+" / ~"[0-9]+"
identifier          = ~"[_a-zA-Z][_a-zA-Z0-9]*"
boolean             = "true" / "false"
nil                 = "nil"

ws                  = ~"\s*"
