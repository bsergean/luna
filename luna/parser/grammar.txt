program             = block newline?

block               = stmt ( ~"(\s*;|\s)" ws stmt )*
stmt                = funccall / assignment / funcdef
                        / if / while / repeat / foreach / for

for                 = "for" ws identifier ws "=" ws
                        expr ws "," ws expr ws ( "," ws expr ws )?
                        "do" ws block ws "end"
foreach             = "for" ws identifier ( ws "," ws identifier )* ws
                        "in" ws expr ( ws "," ws expr)* ws
                        "do" ws block ws "end"

while               = "while" ws expr ws "do" ws block ws "end"
repeat              = "repeat" ws block ws "until" ws expr

if                  = "if" ws expr ws "then" ws block ws
                        ( "elseif" ws expr ws "then" ws block ws )*
                        ( "else" ws block ws )? "end"

funcdef             = "function" ws identifier ws
                        "(" ws funcparams? ws ")" ws
                        block ws "end"
funcparams          = expr ( ws "," expr ws )*
funccall            = identifier ws "(" funcargs ")"
funcargs            = expr ( ws "," ws expr )*

assignment          = identifier ws "=" ws expr

expr                = binop / unop / factor
factor              = ( "(" ws expr ws ")" )
                        / operand

binop               = factor ws op2 ws expr
unop                = op1 ws expr

operand             = boolean / nil / number / string / identifier
op2                 = "==" / "~=" / "<" / ">" / "<=" / "=>"
                        / "+" / "-" / "*" / "/"
                        / "and" / "or"
op1                 = "-" / "not"
keyword             = "break" / "do" / "else" / "elseif" / "end"
                        / "for" / "function" / "goto" / "if" / "in"
                        / "local" / "repeat" / "return"
                        / "then" / "until" / "while"

string              = ( "'" ( "\\'" / ~"[^']" )* "'" )
                        / ( '"' ( '\\"' / ~'[^"]' )* '"' )
number              = ~"[0-9]+[.][0-9]*" / ~"[0-9]*[.][0-9]+" / ~"[0-9]+"
identifier          = ~"[_a-zA-Z][_a-zA-Z0-9]*"
boolean             = "true" / "false"
nil                 = "nil"

newline             = "\n"
ws                  = ~"\s*"
