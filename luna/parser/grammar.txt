# program
program             = ws block ws
block               = stmt ( ~"(\s*;|\s)" ws stmt )*

# stmt
stmt                = funcall / assignment
assignment          = identifier ws "=" ws expr

# expressions
expr                = funcall / or_expr / operand
or_expr             = and_expr  ( ws "or" ws and_expr )*
and_expr            = cmp_expr  ( ws "and" ws cmp_expr )*
cmp_expr            = concat_expr  ( ws cmp_op ws concat_expr )*
concat_expr         = ( arith_expr ws ".." ws concat_expr )   / arith_expr
arith_expr          = term_expr     ( ws arith_op ws term_expr )*
term_expr           = unary_expr    ( ws term_op ws  unary_expr )*
unary_expr          = ( unary_op ws power_expr )  / power_expr
power_expr          = ( factor ws "^" ws power_expr )  / factor
factor              = operand /  ( "(" ws expr ws ")" )

# funcall
funcall             = identifier ws "(" ws funargs? ws ")"
funargs             = expr ( ws "," ws expr )*

# operators
cmp_op              = "<=" / ">=" / "<" / ">" / "~=" / "=="
arith_op            = "+" / "-"
term_op             = "*" / "/" / "%"
unary_op            = "not" / "#" / "-"
operand             = boolean / nil / number / string / identifier

# atoms
string              = ( "'" ( "\\'" / ~"[^']" )* "'" )
                        / ( '"' ( '\\"' / ~'[^"]' )* '"' )
#number              = ~"[0-9]+[.][0-9]*" / ~"[0-9]*[.][0-9]+" / ~"[0-9]+"
number              = ~"[0-9]+[.][0-9]+" / ~"[0-9]+"
identifier          = ~"[_a-zA-Z][_a-zA-Z0-9]*"
boolean             = "true" / "false"
nil                 = "nil"

newline             = "\n"
ws                  = ~"\s*"
